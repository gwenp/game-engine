#include "OutputApiHeader.hpp"

using std::string;
using std::vector;
using std::cout;
using std::endl;

OutputApiHeader::OutputApiHeader(IApplication* app) : IOutputPlugin(app, "OutputApiHeader", PARSER)
{

}

OutputApiHeader::~OutputApiHeader()
{

}

bool OutputApiHeader::doExport(std::string basePath)
{
	if(!controlDirectoryPath(&basePath))
	{
		return false;
	}

	IParserPlugin* parser = (IParserPlugin*) getPluginManager()->getPluginByName("InputManifestFile");

	std::string manifestPath = basePath + "Manifest.MF";
	parser->parseFile(manifestPath);

	string name = parser->getName();
	string version = parser->getVersion();
	vector<string> includes = parser->getIncludes();
	vector<string> methods = parser->getMethods();
	cout << "===== OutputApiHeader::doExport ========" << std::endl;

	cout << "// Plugin interface file (generated). DO NOT EDIT THIS FILE. YOUR CHANGES WILL BE LOST." << endl;
	cout << "// * name :\t" << name << endl;
	cout << "// * version :\t" << version << endl << endl;

	cout << "#ifndef DEF_I" << uppercase(name) << endl;
	cout << "#define DEF_I" << uppercase(name) << endl << endl;

	for (vector<string>::iterator it = includes.begin(); it != includes.end(); ++it)
	{
		if(*it != "")
			cout << "#include " << (*it) << endl;
		else
			cout << endl;
	}

	cout << "class I" << parser->getName() <<  " : public Plugin" << endl;
	cout << "{" << endl;
	cout << "public:" << endl;
	cout << "	I" << parser->getName() <<  "(IApplication* app, std::string name, PluginType type) : Plugin(app, name, type) {};" << endl << endl;


	for (vector<string>::iterator it = methods.begin(); it != methods.end(); ++it)
	{
		if(*it != "")
			cout << "\t"<< "virtual " << (*it) <<" =0;" << endl;
		else
			cout << endl;
	}
	cout << "};" << endl << endl;

	std::cout << "#endif /* DEF_I" << uppercase(name) << " */" << std::endl;
}

bool OutputApiHeader::controlDirectoryPath(std::string* path)
{
	if(!is_dir(path->c_str()))
		return false;

	if(path->substr(path->size()-1, path->size()) != "/")
		*path += "/";

	string manifestPath (*path + "Manifest.MF");
	if(!is_file(manifestPath.c_str()))
		return false;

	return true;
}

extern "C"
{
	Plugin* makePlugin(IApplication* app)
	{
		return new OutputApiHeader(app);
	}
}
